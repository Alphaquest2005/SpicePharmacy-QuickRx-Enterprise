//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace RMSDataAccessLayer
{
    using System.ComponentModel;
    using TrackableEntities;
    using System;
    using System.Collections.Generic;
    using TrackableEntities.Client;
    
    public partial class Item : EntityBase
    {
        public Item()
        {
            this.SalesTax = 0m;
            this.TransactionEntryBase = new ChangeTrackingCollection<TransactionEntryBase>();
            this.ItemDosages = new ChangeTrackingCollection<ItemDosage>();
            CustomStartup();
            this.PropertyChanged += UpdatePropertyChanged;
        }
        partial void CustomStartup();
    
            private void UpdatePropertyChanged(object sender, PropertyChangedEventArgs e)
            {
                if (!string.IsNullOrEmpty(e.PropertyName) && (!Environment.StackTrace.Contains("Internal.Materialization")) && TrackingState == TrackingState.Unchanged)
                {
                    TrackingState = TrackingState.Modified;
                }
            }
        
    	public string Description
    	{ 
    		get { return _Description; }
    		set
    		{
    			if (Equals(value, _Description)) return;
    			_Description = value;
    			NotifyPropertyChanged();
    		}
    	}
    	private string _Description;
        
    	public Nullable<bool> ItemNotDiscountable
    	{ 
    		get { return _ItemNotDiscountable; }
    		set
    		{
    			if (Equals(value, _ItemNotDiscountable)) return;
    			_ItemNotDiscountable = value;
    			NotifyPropertyChanged();
    		}
    	}
    	private Nullable<bool> _ItemNotDiscountable;
        
    	public int ItemId
    	{ 
    		get { return _ItemId; }
    		set
    		{
    			if (Equals(value, _ItemId)) return;
    			_ItemId = value;
    			NotifyPropertyChanged();
    		}
    	}
    	private int _ItemId;
        
    	public string ItemLookupCode
    	{ 
    		get { return _ItemLookupCode; }
    		set
    		{
    			if (Equals(value, _ItemLookupCode)) return;
    			_ItemLookupCode = value;
    			NotifyPropertyChanged();
    		}
    	}
    	private string _ItemLookupCode;
        
    	public string Department
    	{ 
    		get { return _Department; }
    		set
    		{
    			if (Equals(value, _Department)) return;
    			_Department = value;
    			NotifyPropertyChanged();
    		}
    	}
    	private string _Department;
        
    	public string Category
    	{ 
    		get { return _Category; }
    		set
    		{
    			if (Equals(value, _Category)) return;
    			_Category = value;
    			NotifyPropertyChanged();
    		}
    	}
    	private string _Category;
        
    	public decimal Price
    	{ 
    		get { return _Price; }
    		set
    		{
    			if (Equals(value, _Price)) return;
    			_Price = value;
    			NotifyPropertyChanged();
    		}
    	}
    	private decimal _Price;
        
    	public Nullable<decimal> Cost
    	{ 
    		get { return _Cost; }
    		set
    		{
    			if (Equals(value, _Cost)) return;
    			_Cost = value;
    			NotifyPropertyChanged();
    		}
    	}
    	private Nullable<decimal> _Cost;
        
    	public double Quantity
    	{ 
    		get { return _Quantity; }
    		set
    		{
    			if (Equals(value, _Quantity)) return;
    			_Quantity = value;
    			NotifyPropertyChanged();
    		}
    	}
    	private double _Quantity;
        
    	public string ExtendedDescription
    	{ 
    		get { return _ExtendedDescription; }
    		set
    		{
    			if (Equals(value, _ExtendedDescription)) return;
    			_ExtendedDescription = value;
    			NotifyPropertyChanged();
    		}
    	}
    	private string _ExtendedDescription;
        
    	public Nullable<bool> Inactive
    	{ 
    		get { return _Inactive; }
    		set
    		{
    			if (Equals(value, _Inactive)) return;
    			_Inactive = value;
    			NotifyPropertyChanged();
    		}
    	}
    	private Nullable<bool> _Inactive;
        
    	public Nullable<System.DateTime> DateCreated
    	{ 
    		get { return _DateCreated; }
    		set
    		{
    			if (Equals(value, _DateCreated)) return;
    			_DateCreated = value;
    			NotifyPropertyChanged();
    		}
    	}
    	private Nullable<System.DateTime> _DateCreated;
        
    	public Nullable<decimal> SalesTax
    	{ 
    		get { return _SalesTax; }
    		set
    		{
    			if (Equals(value, _SalesTax)) return;
    			_SalesTax = value;
    			NotifyPropertyChanged();
    		}
    	}
    	private Nullable<decimal> _SalesTax;
        
    	public string QBItemListID
    	{ 
    		get { return _QBItemListID; }
    		set
    		{
    			if (Equals(value, _QBItemListID)) return;
    			_QBItemListID = value;
    			NotifyPropertyChanged();
    		}
    	}
    	private string _QBItemListID;
        
    	public string UnitOfMeasure
    	{ 
    		get { return _UnitOfMeasure; }
    		set
    		{
    			if (Equals(value, _UnitOfMeasure)) return;
    			_UnitOfMeasure = value;
    			NotifyPropertyChanged();
    		}
    	}
    	private string _UnitOfMeasure;
        
    	public string ItemName
    	{ 
    		get { return _ItemName; }
    		set
    		{
    			if (Equals(value, _ItemName)) return;
    			_ItemName = value;
    			NotifyPropertyChanged();
    		}
    	}
    	private string _ItemName;
        
    	public string ItemNumber
    	{ 
    		get { return _ItemNumber; }
    		set
    		{
    			if (Equals(value, _ItemNumber)) return;
    			_ItemNumber = value;
    			NotifyPropertyChanged();
    		}
    	}
    	private string _ItemNumber;
        
    	public string Size
    	{ 
    		get { return _Size; }
    		set
    		{
    			if (Equals(value, _Size)) return;
    			_Size = value;
    			NotifyPropertyChanged();
    		}
    	}
    	private string _Size;
        
    	public byte[] EntryTimeStamp
    	{ 
    		get { return _EntryTimeStamp; }
    		set
    		{
    			if (Equals(value, _EntryTimeStamp)) return;
    			_EntryTimeStamp = value;
    			NotifyPropertyChanged();
    		}
    	}
    	private byte[] _EntryTimeStamp;
    
    	public ChangeTrackingCollection<TransactionEntryBase> TransactionEntryBase
    	{
    		get { return _TransactionEntryBase; }
    		set
    		{
    			if (Equals(value, _TransactionEntryBase)) return;
    			_TransactionEntryBase = value;
    			NotifyPropertyChanged();
    		}
    	}
    	private ChangeTrackingCollection<TransactionEntryBase> _TransactionEntryBase;
    
    	public ChangeTrackingCollection<ItemDosage> ItemDosages
    	{
    		get { return _ItemDosages; }
    		set
    		{
    			if (Equals(value, _ItemDosages)) return;
    			_ItemDosages = value;
    			NotifyPropertyChanged();
    		}
    	}
    	private ChangeTrackingCollection<ItemDosage> _ItemDosages;
    }
}
